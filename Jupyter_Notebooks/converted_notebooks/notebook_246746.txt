# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
%matplotlib inline
from __future__ import print_function
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import tarfile
from IPython.display import display, Image
from scipy import ndimage
from sklearn.linear_model import LogisticRegression
from six.moves.urllib.request import urlretrieve
from six.moves import cPickle as pickle

url = 'http://yaroslavvb.com/upload/notMNIST/'

def maybe_download(filename, expected_bytes, force=False):
  """Download a file if not present, and make sure it's the right size."""
  if force or not os.path.exists(filename):
    filename, _ = urlretrieve(url + filename, filename)
  statinfo = os.stat(filename)
  if statinfo.st_size == expected_bytes:
    print('Found and verified', filename)
  else:
    raise Exception(
      'Failed to verify' + filename + '. Can you get to it with a browser?')
  return filename

train_filename = maybe_download('notMNIST_large.tar.gz', 247336696)
test_filename = maybe_download('notMNIST_small.tar.gz', 8458043)

num_classes = 10
np.random.seed(133)

def maybe_extract(filename, force=False):
  root = os.path.splitext(os.path.splitext(filename)[0])[0]  # remove .tar.gz
  if os.path.isdir(root) and not force:
    # You may override by setting force=True.
    print('%s already present - Skipping extraction of %s.' % (root, filename))
  else:
    print('Extracting data for %s. This may take a while. Please wait.' % root)
    tar = tarfile.open(filename)
    sys.stdout.flush()
    tar.extractall()
    tar.close()
  data_folders = [
    os.path.join(root, d) for d in sorted(os.listdir(root))
    if os.path.isdir(os.path.join(root, d))]
  if len(data_folders) != num_classes:
    raise Exception(
      'Expected %d folders, one per class. Found %d instead.' % (
        num_classes, len(data_folders)))
  print(data_folders)
  return data_folders
  
train_folders = maybe_extract(train_filename)
test_folders = maybe_extract(test_filename)

Image("notMNIST_large/a/emxhZGRpLnR0Zg==.png")

image_size = 28  # Pixel width and height.
pixel_depth = 255.0  # Number of levels per pixel.

def load_letter(folder, min_num_images):
  """Load the data for a single letter label."""
  image_files = os.listdir(folder)
  dataset = np.ndarray(shape=(len(image_files), image_size, image_size),
                         dtype=np.float32)
  image_index = 0
  print(folder)
  for image in os.listdir(folder):
    image_file = os.path.join(folder, image)
    try:
      image_data = (ndimage.imread(image_file).astype(float) - 
                    pixel_depth / 2) / pixel_depth
      if image_data.shape != (image_size, image_size):
        raise Exception('Unexpected image shape: %s' % str(image_data.shape))
      dataset[image_index, :, :] = image_data
      image_index += 1
    except IOError as e:
      print('Could not read:', image_file, ':', e, '- it\'s ok, skipping.')
    
  num_images = image_index
  dataset = dataset[0:num_images, :, :]
  if num_images < min_num_images:
    raise Exception('Many fewer images than expected: %d < %d' %
                    (num_images, min_num_images))
    
  print('Full dataset tensor:', dataset.shape)
  print('Mean:', np.mean(dataset))
  print('Standard deviation:', np.std(dataset))
  return dataset
        
def maybe_pickle(data_folders, min_num_images_per_class, force=False):
  dataset_names = []
  for folder in data_folders:
    set_filename = folder + '.pickle'
    dataset_names.append(set_filename)
    if os.path.exists(set_filename) and not force:
      # You may override by setting force=True.
      print('%s already present - Skipping pickling.' % set_filename)
    else:
      print('Pickling %s.' % set_filename)
      dataset = load_letter(folder, min_num_images_per_class)
      try:
        with open(set_filename, 'wb') as f:
          pickle.dump(dataset, f, pickle.HIGHEST_PROTOCOL)
      except Exception as e:
        print('Unable to save data to', set_filename, ':', e)
  
  return dataset_names

train_datasets = maybe_pickle(train_folders, 45000)
test_datasets = maybe_pickle(test_folders, 1800)

with open("notMNIST_large/A.pickle", 'rb') as a_pickle:
    a_set = pickle.load(a_pickle)
    print("images in a_set: %d" % len(a_set))
    plt.imshow(a_set[234])

def pickled_dataset_size(data_file):
  with open(data_file, 'rb') as current_pickle:
    pickled_set = pickle.load(current_pickle)
    print("images in %s: %d" % (data_file, len(pickled_set)))
    
# large data sets
pickled_dataset_size("notMNIST_large/A.pickle")
pickled_dataset_size("notMNIST_large/B.pickle")
pickled_dataset_size("notMNIST_large/C.pickle")
pickled_dataset_size("notMNIST_large/D.pickle")
pickled_dataset_size("notMNIST_large/E.pickle")
pickled_dataset_size("notMNIST_large/F.pickle")
pickled_dataset_size("notMNIST_large/G.pickle")
pickled_dataset_size("notMNIST_large/H.pickle")
pickled_dataset_size("notMNIST_large/I.pickle")
pickled_dataset_size("notMNIST_large/J.pickle")
    
# small data sets
pickled_dataset_size("notMNIST_small/A.pickle")
pickled_dataset_size("notMNIST_small/B.pickle")
pickled_dataset_size("notMNIST_small/C.pickle")
pickled_dataset_size("notMNIST_small/D.pickle")
pickled_dataset_size("notMNIST_small/E.pickle")
pickled_dataset_size("notMNIST_small/F.pickle")
pickled_dataset_size("notMNIST_small/G.pickle")
pickled_dataset_size("notMNIST_small/H.pickle")
pickled_dataset_size("notMNIST_small/I.pickle")
pickled_dataset_size("notMNIST_small/J.pickle")

def make_arrays(nb_rows, img_size):
  if nb_rows:
    dataset = np.ndarray((nb_rows, img_size, img_size), dtype=np.float32)
    labels = np.ndarray(nb_rows, dtype=np.int32)
  else:
    dataset, labels = None, None
  return dataset, labels

def merge_datasets(pickle_files, train_size, valid_size=0):
  num_classes = len(pickle_files)
  valid_dataset, valid_labels = make_arrays(valid_size, image_size)
  train_dataset, train_labels = make_arrays(train_size, image_size)
  vsize_per_class = valid_size // num_classes
  tsize_per_class = train_size // num_classes
    
  start_v, start_t = 0, 0
  end_v, end_t = vsize_per_class, tsize_per_class
  end_l = vsize_per_class+tsize_per_class
  for label, pickle_file in enumerate(pickle_files):
    print('label: %s' % label)
    try:
      with open(pickle_file, 'rb') as f:
        letter_set = pickle.load(f)
        # let's shuffle the letters to have random validation and training set
        np.random.shuffle(letter_set)
        if valid_dataset is not None:
          valid_letter = letter_set[:vsize_per_class, :, :]
          valid_dataset[start_v:end_v, :, :] = valid_letter
          valid_labels[start_v:end_v] = label
          start_v += vsize_per_class
          end_v += vsize_per_class
                    
        train_letter = letter_set[vsize_per_class:end_l, :, :]
        train_dataset[start_t:end_t, :, :] = train_letter
        train_labels[start_t:end_t] = label
        start_t += tsize_per_class
        end_t += tsize_per_class
    except Exception as e:
      print('Unable to process data from', pickle_file, ':', e)
      raise
    
  return valid_dataset, valid_labels, train_dataset, train_labels
            
            
train_size = 200000
valid_size = 10000
test_size = 10000

valid_dataset, valid_labels, train_dataset, train_labels = merge_datasets(train_datasets, train_size, valid_size)
_, _, test_dataset, test_labels = merge_datasets(test_datasets, test_size)

print('Training:', train_dataset.shape, train_labels.shape)
print('Validation:', valid_dataset.shape, valid_labels.shape)
print('Testing:', test_dataset.shape, test_labels.shape)

def randomize(dataset, labels):
  permutation = np.random.permutation(labels.shape[0])
  shuffled_dataset = dataset[permutation,:,:]
  shuffled_labels = labels[permutation]
  return shuffled_dataset, shuffled_labels
train_dataset, train_labels = randomize(train_dataset, train_labels)
test_dataset, test_labels = randomize(test_dataset, test_labels)
valid_dataset, valid_labels = randomize(valid_dataset, valid_labels)

import random
index = random.randint(0, train_size)
print('training example: %d, index: %d' % (train_labels[index], index)); index = random.randint(0, train_size);
print('training example: %d, index: %d' % (train_labels[index], index)); index = random.randint(0, train_size);
print('training example: %d, index: %d\n' % (train_labels[index], index))

index = random.randint(0, valid_size);
print('validation example: %d, index: %d' % (valid_labels[index], index)); index = random.randint(0, valid_size);
print('validation example: %d, index: %d' % (valid_labels[index], index)); index = random.randint(0, valid_size);
print('validation example: %d, index: %d\n' % (valid_labels[index], index))

index = random.randint(0, test_size);
print('test example: %d, index: %d' % (test_labels[index], index)); index = random.randint(0, test_size);
print('test example: %d, index: %d' % (test_labels[index], index)); index = random.randint(0, test_size);
print('test example: %d, index: %d\n' % (test_labels[index], index))

pickle_file = 'notMNIST.pickle'

try:
  f = open(pickle_file, 'wb')
  save = {
    'train_dataset': train_dataset,
    'train_labels': train_labels,
    'valid_dataset': valid_dataset,
    'valid_labels': valid_labels,
    'test_dataset': test_dataset,
    'test_labels': test_labels,
    }
  pickle.dump(save, f, pickle.HIGHEST_PROTOCOL)
  f.close()
except Exception as e:
  print('Unable to save data to', pickle_file, ':', e)
  raise

statinfo = os.stat(pickle_file)
print('Compressed pickle size:', statinfo.st_size)

import time
import hashlib

t1 = time.time()

train_hashes = [hashlib.sha1(x).digest() for x in train_dataset]
valid_hashes = [hashlib.sha1(x).digest() for x in valid_dataset]
test_hashes = [hashlib.sha1(x).digest() for x in test_dataset]

print("train_hashes count: %d" % len(train_hashes))
print("valid_hashes count: %d" % len(valid_hashes))
print("test_hashes count: %d" % len(test_hashes))

valid_in_train = np.in1d(valid_hashes, train_hashes)
test_in_train = np.in1d(test_hashes, train_hashes)
test_in_valid = np.in1d(test_hashes, valid_hashes)

unique_train_count = len(train_dataset) - (valid_in_train.sum() + test_in_train.sum())
print("unique train samples: %d out of %d total samples\n" % (unique_train_count, len(train_dataset)))
print("valid_in_train count: %d" % len(valid_in_train))
print("test_in_train count: %d" % len(test_in_train))
print("test_in_valid count: %d" % len(test_in_valid))

valid_keep = ~valid_in_train
test_keep = ~(test_in_train | test_in_valid)

valid_dataset_clean = valid_dataset[valid_keep]
valid_labels_clean = valid_labels[valid_keep]

test_dataset_clean = test_dataset[test_keep]
test_labels_clean = test_labels[test_keep]

t2 = time.time()

print("Time: %0.2fs\n" % (t2 - t1))
print("valid -> train overlap %d samples" % valid_in_train.sum())
print("test -> train overlap %d samples" % test_in_train.sum())
print("test -> valid overlap %d samples\n" % test_in_valid.sum())

print("valid_dataset_clean size: %d" % len(valid_dataset_clean))
print("valid_labels_clean size: %d" % len(valid_labels_clean))
print("test_dataset_clean size: %d" % len(test_dataset_clean))
print("test_labels_clean size: %d" % len(test_labels_clean))


# write clean dataset
clean_pickle_file = 'notMNIST_clean.pickle'

try:
  f = open(clean_pickle_file, 'wb')
  save = {
    'train_dataset': train_dataset,
    'train_labels': train_labels,
    'valid_dataset': valid_dataset_clean,
    'valid_labels': valid_labels_clean,
    'test_dataset': test_dataset_clean,
    'test_labels': test_labels_clean,
    }
  pickle.dump(save, f, pickle.HIGHEST_PROTOCOL)
  f.close()
except Exception as e:
  print('Unable to save data to', clean_pickle_file, ':', e)
  raise
    
statinfo = os.stat(clean_pickle_file)
print('Compressed clean pickle size:', statinfo.st_size)

def train_and_evaluate(sample_count, tr_set, tr_labels, v_set, v_labels, t_set, t_labels):
  print('model trained with %d samples' % sample_count)
  (train_samples, train_width, train_height) = tr_set.shape
  (valid_samples, valid_width, valid_height) = v_set.shape
  (test_samples, test_width, test_height) = t_set.shape

  X_valid = np.reshape(v_set, (valid_samples, valid_width*valid_height)) 
  X_test = np.reshape(t_set, (test_samples, test_width*test_height))

  X = np.reshape(train_dataset, (train_samples, train_width*train_height))[0:sample_count]
  Y = train_labels[0:sample_count]
  model = LogisticRegression()
  model.fit(X, Y)

  train_pred = model.predict(X)
  train_pred_match = train_pred == Y

  valid_pred = model.predict(X_valid)
  valid_pred_match = valid_pred == v_labels

  test_pred = model.predict(X_test)
  test_pred_match = test_pred == t_labels

  print("  train set prediction rate: %f" % (train_pred_match.sum() / float(len(Y))))
  print("  validation set prediction rate: %f" % (valid_pred_match.sum() / float(len(v_labels))))
  print("  test set prediction rate: %f\n" % (test_pred_match.sum() / float(len(t_labels))))

train_and_evaluate(50, train_dataset, train_labels, valid_dataset_clean, valid_labels_clean, test_dataset_clean, test_labels_clean)
train_and_evaluate(100, train_dataset, train_labels, valid_dataset_clean, valid_labels_clean, test_dataset_clean, test_labels_clean)
train_and_evaluate(1000, train_dataset, train_labels, valid_dataset_clean, valid_labels_clean, test_dataset_clean, test_labels_clean)
# train_and_evaluate(5000, train_dataset, train_labels, valid_dataset_clean, valid_labels_clean, test_dataset_clean, test_labels_clean)
# train_and_evaluate(200000, train_dataset, train_labels, valid_dataset_clean, valid_labels_clean, test_dataset_clean, test_labels_clean)
