import os 
import tarfile
import urllib

DOWNLOAD_ROOT = "https://github.com/ageron/handson-ml2/raw/master/"
HOUSING_PATH = os.path.join("datasets", "housing")
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"

HOUSING_URL

#function to fetch the data
def fetch_housing_data(housing_url = HOUSING_URL, housing_path = HOUSING_PATH):
    os.makedirs(housing_path, exist_ok=True)
    tgz_path = os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url,tgz_path) #Dowloads the data from housing_url to tgz_path
    housing_tgz = tarfile.open(tgz_path) 
    housing_tgz.extractall(path = housing_path)#extracts and saves the data into housing_path
    housing_tgz.close()

#loading the data
import pandas as pd

#function to load the data
def load_housing_data(housing_path = HOUSING_PATH):
    csv_path = os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

fetch_housing_data()

df = load_housing_data()

df.head()

# a quick discription of data
df.info()

#summary of the categorical variable
df['ocean_proximity'].value_counts()

#summary of the numerical datatypes
df.describe()

%matplotlib inline
import matplotlib.pyplot as plt
df.hist(bins = 50, figsize = (20,15))
plt.show()

import numpy as np

#function for test train split
def split_test_train(data, test_ratio):
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) *test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

from zlib import crc32

def test_set_check(identifier, test_ratio):
    return crc32(np.int64(identifier)) & 0xffffffff < test_ratio * 2**32

def split_train_test_by_id(data, test_ratio, id_column):
    ids = data[id_column]
    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio))
    return data.loc[~in_test_set], data.loc[in_test_set]

#adding index column to the dataframe
df_with_index = df.reset_index()
train_set, test_set = split_train_test_by_id(df_with_index, 0.2, "index")

#we can also use sklearn inbuilt train_test_split function
from sklearn.model_selection import train_test_split

train_set, test_set = train_test_split(df, test_size = 0.2, random_state = 42)

# binning the median incomes into different categories
df['income_cat'] = pd.cut(df['median_income'],
                         bins = [0., 1.5, 3.0, 4.5, 6, np.inf],
                         labels = [1,2,3,4,5])

df['income_cat'].hist()

#doing stratified sampling based on median income categories
from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1,test_size=0.2, random_state=42)

for train_index, test_index in split.split(df, df['income_cat']):
    strat_train_set = df.loc[train_index]
    strat_test_set = df.loc[test_index]   

# propotion of each median income category in train set
strat_train_set['income_cat'].value_counts() / len(strat_train_set)

# propotion of each median income category in entire set
df['income_cat'].value_counts() / len(df)

# removing the income_cat attribute to get the data back in the same state
for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis=1, inplace=True)
