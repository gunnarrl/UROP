# import numpy for math calculations
import numpy as np

# import pandas for data (csv) manipulation
import pandas as pd

# import matplotlib for plotting
import matplotlib.pyplot as plt
import matplotlib as mpl
# import seaborn for more plotting options(built on top of matplotlib)
import seaborn as sns

# import plotly for interactive plotting 
import plotly.plotly as py
import plotly.graph_objs as go

# provide support for plotly to interact with pandas
#import cufflinks as cf
#cf.go_offline()

# Supress unnecessary warnings so that presentation looks clean
import warnings
warnings.filterwarnings("ignore")

# display plots on the notebook itself
%matplotlib inline

train = pd.read_csv("../dataset/all/application_train.csv")
application_test = pd.read_csv("../dataset/all/application_test.csv")
bureau = pd.read_csv("../dataset/all/bureau.csv")
bureau_balance = pd.read_csv("../dataset/all/bureau_balance.csv")
credit_card_balance = pd.read_csv("../dataset/all/credit_card_balance.csv")
installments_payments = pd.read_csv("../dataset/all/installments_payments.csv")
previous_application = pd.read_csv("../dataset/all/previous_application.csv")
POS_CASH_balance = pd.read_csv("../dataset/all/POS_CASH_balance.csv")

print("The application_train.csv has {} entires.".format(train.shape))

train.describe()

train.info()

train.columns

train.head()

plt.hist(train['NAME_CONTRACT_TYPE'])

# add counter plot

plt.figure(figsize=(11,9))
sns.countplot(x='NAME_CONTRACT_TYPE',hue='CODE_GENDER',data = train)

def missing_data(df_name):
    
    
    
    """
        
        df_name: takes a data frame and outputs its sum and percentile
    
    """
    
    total = df_name.isnull().sum().sort_values(ascending = False)
    percent = (df_name.isnull().sum()/df_name.isnull().count()*100).sort_values(ascending = False)
    return pd.concat([total,percent],axis=1,keys=['Total','Percentile'])
    

missing_data(train).head(10)

missing_data(application_test).head(10)

missing_data(bureau).head(10)

missing_data(bureau_balance).head(10)

missing_data(credit_card_balance).head(10)

missing_data(installments_payments).head(10)

missing_data(previous_application).head(10)

missing_data(POS_CASH_balance).head(10)

temp = train["TARGET"].value_counts()
df = pd.DataFrame({'labels': temp.index,
                   'values': temp.values})
plt.figure(figsize = (6,6))
plt.title('Application loans repayed - train dataset')
sns.set_color_codes("pastel")
sns.barplot(x = 'labels', y="values", data=df)
locs, labels = plt.xticks()
plt.show()


mpl.rcParams.update(mpl.rcParamsDefault)
pair = train[['AMT_CREDIT', 'AMT_ANNUITY', 'DAYS_BIRTH', 'DAYS_REGISTRATION',
              'DAYS_LAST_PHONE_CHANGE', 'TARGET']].fillna(0)
sns.pairplot(pair)
plt.title('Correlation of Independent Vars with Target')
plt.show()

fig, ax = plt.subplots(figsize=(52,15))
sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')
