import ipywidgets as widgets
from ipywidgets import interact, interact_manual

import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Load the diabetes dataset
diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)

# Use only one feature (BMI)
diabetes_X2D = diabetes_X[:, np.newaxis, 2]
# Use only two feature (BMI and Average blood pressure)
diabetes_X3D = diabetes_X[:,[2, 3]]

# Split the data into training/testing sets
diabetes_X_train = diabetes_X2D[:-20]
diabetes_X_test = diabetes_X2D[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes_y[:-20]
diabetes_y_test = diabetes_y[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()
# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

@interact
def show_articles_more_than(m=1000, c=100):
    # Make predictions using the testing set
    regr.coef_[0] = m
    regr.intercept_ = c
    diabetes_y_pred = regr.predict(diabetes_X_test)

    plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')
    plt.plot(diabetes_X_test, diabetes_y_pred, color='red', linewidth=3)

    plt.xlim=(-0.1, 0.15)
    plt.ylim=(0, 350)
    plt.title('BMI vs disease progression')
    plt.xlabel('Body mass index')
    plt.ylabel('Disease Progression')
    plt.show()
    return m, c

# Split the data into training/testing sets
diabetes_X_train = diabetes_X3D[:-20]
diabetes_X_test = diabetes_X3D[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes_y[:-20]
diabetes_y_test = diabetes_y[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()
# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

x1max, x2max = np.around(diabetes_X_train.max(axis=0), 2)
x1min, x2min = np.around(diabetes_X_train.min(axis=0), 2)

[a1, a2] = regr.coef_
d = regr.intercept_

x1max, x2max = np.around(diabetes_X_train.max(axis=0), 2)
x1min, x2min = np.around(diabetes_X_train.min(axis=0), 2)

# create x,y
xx, yy = np.meshgrid(np.linspace(x1min,x1max,10), np.linspace(x2min,x2max,10))

# calculate corresponding z
zz = a1*xx + a2*yy + d

import plotly.graph_objs as go

fig = go.FigureWidget(data=
                      [go.Scatter3d(x=diabetes_X_train[:,0], 
                                    y=diabetes_X_train[:,1] , 
                                    z=diabetes_y_train, 
                                    mode='markers',
                                    opacity=0.9),
                      go.Surface(x=xx, y=yy, z=zz, opacity=0.8)])

fig.update_traces(marker=dict(size=6,
                              line=dict(width=1, color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

fig.update_layout(title='BMI and average blood pressure vs disease progression',
                   scene = dict(
                       xaxis = dict(title='BMI'),
                       yaxis = dict(title='Average Blood Pressure'),
                       zaxis = dict(title='Disease Progression'),),
                  autosize=False,
                  width=800, height=800,
                  margin=dict(l=65, r=50, b=65, t=90))
fig

@interact
def show_articles_more_than(a1=139, a2=912, d=152):
    # Make predictions using the testing set
    zz = a1*xx + a2*yy + d
    bar = fig.data[1]
    bar.z = zz
    return 

# Split the data into training/testing sets
diabetes_X_train = diabetes_X2D[:-20]
diabetes_X_test = diabetes_X2D[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes_y[:-20]
diabetes_y_test = diabetes_y[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()

@interact
def show_articles_more_than(groups=['A', 'B', 'C']):
    # Make predictions using the testing set
    # Train the model using the training sets
    if groups == 'A':
        idx = diabetes_X_train > -np.inf
        regr.fit(diabetes_X_train, diabetes_y_train)
    elif groups == 'B':
        idx = diabetes_X_train > 0.1
    else:
        idx = diabetes_X_train < -0.05
        
    regr.fit(diabetes_X_train[idx,np.newaxis], diabetes_y_train[idx.flatten()])
    
    # Make predictions using the testing set
    diabetes_y_pred = regr.predict(diabetes_X_test)

    # The coefficients
    print('Coefficients: ', regr.coef_[0])
    # The mean squared error
    print('Mean squared error: %.2f'
          % mean_squared_error(diabetes_y_test, diabetes_y_pred))
    # The coefficient of determination: 1 is perfect prediction
    print('Coefficient of determination: %.2f'
          % r2_score(diabetes_y_test, diabetes_y_pred))

    # Plot outputs
    sc1 = plt.scatter(diabetes_X_train[idx,np.newaxis], diabetes_y_train[idx.flatten()],  color='black')
    sc2 = plt.scatter(diabetes_X_train[~idx,np.newaxis], diabetes_y_train[~idx.flatten()],  color='lightgray')
    sc3 = plt.scatter(diabetes_X_test, diabetes_y_test,  color='blue')
    
    plt.plot(diabetes_X_test, diabetes_y_pred, color='red', linewidth=3)

    sc1.set_label('Training data')
    sc2.set_label('Unknown data')
    sc3.set_label('Test data')
    
    plt.title('BMI vs disease progression in sampling bias settings')
    plt.xlabel('Body mass index')
    plt.ylabel('Disease Progression')
    plt.legend()
    plt.show()

idx1 = np.where(np.bitwise_and(diabetes_X_train < 0.1, diabetes_y_train.reshape((-1,1)) > 200))[0]
idx2 = np.where(diabetes_X_train >= 0.1)[0]
idx = np.concatenate((idx1[:20], idx2))

regr.fit(diabetes_X_train[idx], diabetes_y_train[idx.flatten()])

# Make predictions using the testing set
diabetes_y_pred = regr.predict(diabetes_X_test)

# The coefficients
print('Coefficients: ', regr.coef_[0])
# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(diabetes_y_test, diabetes_y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
      % r2_score(diabetes_y_test, diabetes_y_pred))

# Plot outputs
sc2 = plt.scatter(diabetes_X_train, diabetes_y_train,  color='lightgray')
sc1 = plt.scatter(diabetes_X_train[idx], diabetes_y_train[idx.flatten()],  color='black')
sc3 = plt.scatter(diabetes_X_test, diabetes_y_test,  color='blue')

plt.plot(diabetes_X_test, diabetes_y_pred, color='red', linewidth=3)

sc1.set_label('Training data')
sc2.set_label('Unknown data')
sc3.set_label('Test data')

plt.title('BMI vs disease progression in imbalanced data setting')
plt.xlabel('Body mass index')
plt.ylabel('Disease Progression')
plt.legend()
plt.show()

# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

# Make predictions using the testing set
diabetes_y_pred = regr.predict(diabetes_X_test)

# The coefficients
print('Coefficients: ', regr.coef_[0])
# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(diabetes_y_test, diabetes_y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
      % r2_score(diabetes_y_test, diabetes_y_pred))

# Plot outputs
plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')
plt.plot(diabetes_X_test, diabetes_y_pred, color='red', linewidth=3)

plt.xticks(())
plt.yticks(())

plt.title('BMI vs disease progression')
plt.xlabel('Body mass index')
plt.ylabel('Disease Progression')
plt.show()
