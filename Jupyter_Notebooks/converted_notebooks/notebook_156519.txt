import oommfc as oc
import discretisedfield as df
%matplotlib inline

p1 = (0, 0, 0)
p2 = (10e-9, 1e-9, 1e-9)
cell = (1e-9, 1e-9, 1e-9)
mesh = oc.Mesh(p1=p1, p2=p2, cell=cell)

system = oc.System(name="zeeman")  # create the (micromagnetic) system object

H = (0, 0, 1e6)  # external magnetic field (A/m)
Ms = 8e6  # saturation magnetisation (A/m)
system.hamiltonian = oc.Zeeman(H=H)  # define system's Hamiltonian
system.m = df.Field(mesh, value=(1, 0, 1), norm=Ms)  # define initial magnetisation

system.m.plot_slice("y", 0);

md = oc.MinDriver()  # create energy minimisation driver
md.drive(system)  # run energy minimisation

system.m.plot_slice("y", 0);

system = oc.System(name="uniaxial_anisotropy")
system.hamiltonian = oc.UniaxialAnisotropy(K=6e6, u=(1, 0, 1))

def m_initial(pos):
    x, y, z = pos
    if x <= 5e-9:
        return (-1, 0, -0.1)
    else:
        return (1, 0, 0.1)

system.m = df.Field(mesh, value=m_initial, norm=Ms)

system.m.plot_slice("y", 0);

md.drive(system)
system.m.plot_slice("y", 0);

system = oc.System(name="exchange")
system.hamiltonian = oc.Exchange(A=8e-12)

def m_initial(pos):
    x, y, z = pos
    if x <= 5e-9:
        return (-1, 0, 1)
    else:
        return (1, 0, 1)
    
system.m = df.Field(mesh, value=m_initial, norm=Ms)

system.m.plot_slice("y", 0);

md.drive(system)
system.m.plot_slice("y", 0);

system = oc.System(name="dmi")
system.hamiltonian = oc.DMI(kind="interfacial", D=3e-3)
system.m = df.Field(mesh, value=(0, 0, 1), norm=Ms)

md.drive(system)

system.m.plot_slice("y", 0);

system = oc.System(name="exchange_and_zeeman")

# We can add multiple interactions using the 'plus' operator
system.hamiltonian = oc.Exchange(A=8e-12) + oc.Zeeman(H=(0, 0, -1e6))

def m_initial(pos):
    x, y, z = pos
    if x <= 5e-9:
        return (-1, 0, 1)
    else:
        return (1, 0, 1)
    
system.m = df.Field(mesh, value=m_initial, norm=Ms)

system.m.plot_slice("y", 0);

md.drive(system)
system.m.plot_slice("y", 0);

system = oc.System(name="exchange_and_DMI")

A = 1e-11  # exchange energy constant (J/m)
D = 6.28e-3  # DMI energy constant (J/m**2)
Ms = 8e6 # Saturation magnetisation (A/m)

mesh = oc.Mesh(p1=(0, 0, 0), p2=(20e-9, 1e-9, 1e-9), cell=(1e-9, 1e-9, 1e-9))
m_initial = (0, 1, 1)    # uniform initial magnetisation
system.m = df.Field(mesh, value=m_initial, norm=Ms)
system.m.plot_slice("y", 0);

# insert missing code here.

md = oc.MinDriver()  # create energy minimisation driver
md.drive(system)

system.m.plot_slice("y", 0);
